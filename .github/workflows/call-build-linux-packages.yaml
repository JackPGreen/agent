---
name: Generate Linux packages
on:
  workflow_call:
    inputs:
      target-matrix:
        description: The build matrix of targets as a JSON build matrix.
        required: true
        type: string
      version:
        description: The version we are building for (as a numeric value 1.2.3).
        required: true
        type: string
      ref:
        description: The commit, SHA or branch to use in this repository.
        required: false
        type: string
        default: main
      nightly-build-info:
        description: Any special information to add to the nightly build information string.
        required: false
        type: string
        default: ""
      dockerhub-username:
        description: The Dockerhub username to use for authenticated pulls.
        required: false
        type: string
        default: ""
      amd-runner-label:
        description: The label to use for the runner (if not specified then the default ubuntu-latest or equivalent is used).
        required: false
        type: string
        default: "namespace-profile-ubuntu-latest"
      arm-runner-label:
        description: The label to use for the runner (if not specified then the default ubuntu-latest or equivalent is used).
        required: false
        type: string
        default: "namespace-profile-ubuntu-latest-arm"
      large-amd-runner-label:
        description: The label to use for the runner (if not specified then the default ubuntu-latest or equivalent is used).
        required: false
        type: string
        default: 'namespace-profile-ubuntu-latest-4cpu-16gb'
    secrets:
      gpg_private_key:
        description: The optional GPG key to use for signing the packages.
        required: false
      gpg_private_key_password:
        description: If the GPG key requires a password then specify here, otherwise not required.
        required: false
      dockerhub-token:
        description: The Dockerhub token to use for authenticated pulls (not pushes).
        required: false
jobs:
  build-packages:
    name: agent - ${{ matrix.distro }} package build and upload
    runs-on: ${{ (contains(matrix.distro, 'arm') && inputs.arm-runner-label) || (contains(matrix.distro, 'centos/6') && inputs.large-amd-runner-label) || inputs.amd-runner-label }}
    timeout-minutes: 60
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        distro: ${{ fromJson(inputs.target-matrix) }}
    steps:
      - name: Checkout ${{ inputs.ref }} code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
          repository: FluentDo/agent

      - name: Ensure we apply specific version from tag
        run: ./scripts/setup-code.sh
        shell: bash
        env:
          FLUENTDO_AGENT_VERSION: ${{ inputs.version }}

      - name: Deltas
        run: git diff
        shell: bash

      # Must be removed on Namespace runners
      - name: Set up QEMU
        if: ${{ !contains( runner.name, 'nsc-' ) }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ !contains( runner.name, 'nsc-' ) }}
        uses: docker/setup-buildx-action@v3

      - name: Get package name
        uses: ./.github/actions/get-package-name
        id: get_package_name
        with:
          distro: "${{ matrix.distro }}"

      - name: Log in to docker.io for authorised pulls
        if: inputs.dockerhub-username != ''
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Log in to the GHCR registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Use the upstream packaging script to keep consistent and up-to-date
      - name: ${{ matrix.distro }} artefacts
        run: |
          rm -rf source/packaging/packages/${{ matrix.distro }}/agent/
          set
          chmod +x ./build.sh
          ./build.sh
        env:
          FLB_DISTRO: ${{ matrix.distro }}
          FLB_OUT_DIR: agent
          FLB_NIGHTLY_BUILD: ${{ inputs.nightly-build-info }}
          # Optionally use separate caches for PRs to mainline
          # CACHE_ID: ${{ github.event_name != 'pull_request' && 'main' || 'pr' }}
        working-directory: source/packaging
        shell: bash

      # Create a workflow artefact using the contents of the distribution directory.
      # package-centos-7
      #
      # We also want this package to be the root directory so remove any extra nesting:
      # e.g. for centos/7 + standard we include everything from 'source/packaging/packages/centos/7/'
      - name: Upload the ${{ matrix.distro }} artefacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_package_name.outputs.package-name }}
          path: |
            source/packaging/packages/${{ matrix.distro }}/agent
          if-no-files-found: error

      - name: List packages
        continue-on-error: false
        run: ls -lR source/packaging/packages/${{ matrix.distro }}/agent
        shell: bash

      - name: List DEB package dependencies
        continue-on-error: false
        run: find source/packaging/packages/ -type f -name '*.deb' -exec sh -c 'i="$1";echo "$i";dpkg -I "$i"' shell {} \;
        shell: bash

      - name: List RPM package dependencies
        continue-on-error: false
        run: find source/packaging/packages/ -type f -name '*.rpm' -exec sh -c 'i="$1";echo "$i";docker run --rm -t -v "$PWD/$i":/test.rpm:ro registry.access.redhat.com/ubi9:9.5 yum -q deplist /test.rpm' shell {} \;
        shell: bash

      - name: CentOS 6 checks
        if: matrix.distro == 'centos/6'
        run: /bin/bash ./scripts/centos6-init-check.sh
        shell: bash
