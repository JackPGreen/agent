name: Reusable workflow to run container tests
on:
  workflow_call:
    inputs:
      ref:
        description: The commit, SHA or branch to use in this repository.
        required: false
        type: string
        default: main
      image:
        description: The full image name to test.
        required: false
        default: "ghcr.io/fluentdo/agent"
        type: string
      image-tag:
        description: The image tag to test.
        required: true
        type: string
      kind-version:
        description: The version of kind to use for the tests.
        required: true
        type: string
    secrets:
      github-token:
        description: Token to use to pull images from GitHub Container Registry.
        required: true
jobs:
  test-containers:
    name: Test K8S version ${{ inputs.kind-version }} with ${{ inputs.image }}:${{ inputs.image-tag }}
    runs-on: ubuntu-latest
    env:
      NAMESPACE: fluent-agent-test
      IMAGE: ${{ inputs.image }}
      IMAGE_TAG: ${{ inputs.image-tag }}
      KIND_CLUSTER_NAME: test-cluster-${{ inputs.kind-version }}-${{ github.run_id }}
      KIND_VERSION: ${{ inputs.kind-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: FluentDo/agent
          ref: ${{ inputs.ref || github.ref }}
          token: ${{ secrets.github-token }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Run config tests
        run: ./testing/run-config-tests.sh
        shell: bash

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          install_only: true
          version: v0.30.0

      - name: Run test
        run: ./testing/run-k8s-tests.sh
        shell: bash

      # Debugging steps to run if something goes wrong
      - name: Debug - List all pods
        if: always()
        run: kubectl get pods -A
        shell: bash

      - name: Debug - Describe pods
        if: always()
        run: kubectl describe pods -n "$NAMESPACE"
        shell: bash

      - name: Debug - Get logs from pods
        if: always()
        run: |
          for pod in $(kubectl get pods -n "$NAMESPACE" -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs from pod: $pod"
            kubectl logs $pod -n "$NAMESPACE" || echo "No logs available for pod: $pod"
            echo "-----------------------------------"
          done
        shell: bash
