name: Reusable workflow to run container tests
on:
  workflow_call:
    inputs:
      ref:
        description: The commit, SHA or branch to use in this repository.
        required: false
        type: string
        default: main
      image:
        description: The full image name to test.
        required: false
        default: "ghcr.io/fluentdo/agent"
        type: string
      image-tag:
        description: The image tag to test.
        required: true
        type: string
    secrets:
      github-token:
        description: Token to use to pull images from GitHub Container Registry.
        required: true
jobs:
  get-meta:
    name: Get meta information required
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      kind-versions: ${{ steps.set-meta.outputs.kind-versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: FluentDo/agent
          ref: ${{ inputs.ref || github.ref }}

      - name: Extract the configuration from the JSON file
        id: set-meta
        run: |
          KIND_VERSIONS=$(cat "$JSON_FILE_NAME" | jq -c .kind_versions )
          echo "kind-versions=$KIND_VERSIONS"
          echo "kind-versions=$KIND_VERSIONS" >> $GITHUB_OUTPUT
        shell: bash
        env:
          JSON_FILE_NAME: build-config.json

  test-bats-container:
    name: Run BATS tests for ${{ inputs.image }}/test:${{ inputs.image-tag }}
    runs-on: ubuntu-latest
    env:
      FLUENTDO_AGENT_TAG: ${{ inputs.image-tag }}
    permissions:
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: FluentDo/agent
          ref: ${{ inputs.ref || github.ref }}
          token: ${{ secrets.github-token }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Run all functional BATS tests
        run: docker run --rm -t "${FLUENTDO_AGENT_IMAGE}:${FLUENTDO_AGENT_TAG}"
        shell: bash
        env:
          # Use the BATS functional test image here
          FLUENTDO_AGENT_IMAGE: ${{ inputs.image }}/test

      - name: Install BATS
        uses: bats-core/bats-action@3.0.1
        with:
          assert-install: false
          detik-install: false
          file-install: false
          support-install: false

      - name: Install Rush for parallelism
        run: curl -sSfL https://github.com/shenwei356/rush/releases/download/v0.7.0/rush_linux_amd64.tar.gz | sudo tar xzf - -C /usr/local/bin
        shell: bash

      - name: Run container integration tests
        run: ./testing/bats/run-container-integration-tests.sh
        shell: bash
        env:
          # We use the actual image here for testing against
          FLUENTDO_AGENT_IMAGE: ${{ inputs.image }}
          # allow for some parallelity without GNU parallel, since it is not installed by default
          BATS_NO_PARALLELIZE_ACROSS_FILES: 1
          BATS_NUMBER_OF_PARALLEL_JOBS: 4
          BATS_PARALLEL_BINARY_NAME: rush

  test-verify-signatures:
    name: Verify image signatures for ${{ inputs.image }}:${{ inputs.image-tag }}
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          repository: FluentDo/agent
          ref: ${{ inputs.ref || github.ref }}
          token: ${{ secrets.github-token }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Set up cosign
        run: |
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          cosign version
        shell: bash

      - name: Verify image signature
        run: cosign verify --key ./cosign.pub ${{ inputs.image }}:${{ inputs.image-tag }}
        shell: bash

  test-redhat-certification:
    name: Test UBI container will pass certification
    if: contains( inputs.image, 'ubi' )
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Set up preflight binary
        run: |
          curl -sSfLO https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/latest/download/preflight-linux-amd64
          chmod a+x ./preflight-linux-amd64
          ./preflight-linux-amd64 -v
        shell: bash

      - name: Run tests
        run: ./preflight-linux-amd64 check container ${{ inputs.image }}:${{ inputs.image-tag }}
        shell: bash

      # https://github.com/redhat-openshift-ecosystem/openshift-preflight/issues/1235
      # https://github.com/redhat-openshift-ecosystem/openshift-preflight/issues/535
      - name: Ensure we pass as preflight does not use error code exit
        run: |
          if grep 'Preflight result: FAILED' preflight.log; then
            echo "ERROR: failed checks"
            exit 1
          elif ! grep 'Preflight result: PASSED' preflight.log; then
            echo "ERROR: checks did not pass"
            exit 1
          fi
          echo "INFO: checks passed"
        shell: bash

      - name: Preflight log
        if: always()
        continue-on-error: true
        run: cat preflight.log
        shell: bash

      - name: Image debug
        continue-on-error: true
        if: always()
        run: |
          docker pull ${{ inputs.image }}:${{ inputs.image-tag }}
          docker inspect ${{ inputs.image }}:${{ inputs.image-tag }}
        shell: bash

  test-kubernetes:
    name: Run container tests for ${{ inputs.image }}:${{ inputs.image-tag }} on K8S version ${{ matrix.kind-version }}
    uses: ./.github/workflows/call-test-containers-k8s.yaml
    needs:
      - get-meta
    with:
      kind-version: ${{ matrix.kind-version }}
      image: ${{ inputs.image }}
      image-tag: ${{ inputs.image-tag }}
      ref: ${{ inputs.ref }}
    secrets:
      github-token: ${{ secrets.github-token }}
    strategy:
      matrix:
        kind-version: ${{ fromJson(needs.get-meta.outputs.kind-versions) }}

  test-complete:
    name: All container tests complete
    # Always run this to check the results of the other jobs including skipped ones
    if: always()
    runs-on: ubuntu-latest
    needs:
      - test-kubernetes
      - test-redhat-certification
      - test-verify-signatures
      - test-bats-container
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          # Add any jobs that can be skipped here to avoid failure of this job
          # test-redhat-certification is skipped if not UBI image
          allowed-skips: test-redhat-certification
          # Convert the needs object to JSON to pass it in
          jobs: ${{ toJSON(needs) }}
      - name: All tests passed
        run: echo "All tests passed for ${{ inputs.image }}:${{ inputs.image-tag }}"
        shell: bash
